# Problem #12: The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be. The first ten terms would be:

#Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import itertools
import time



flatten_iter = itertools.chain.from_iterable

triNum = lambda num: num*(num+1)/2

def factors(n):
 return set(flatten_iter((i, n//i) 
  for i in range(1, int(n**0.5)+1) if n % i == 0))

def solution(num):
 x=1
 y=1
 while x <=num:
  x = len(factors(triNum(y)))
  y+=1
 return triNum(y-1)


#Start run time clock for function 1 
start = time.time()

# Set for loop for multiple interations (10000)
for x in xrange(1): 
   
    #Identify a specific prime    
    a = solution(500)
    
#Return run time
elapsed = (time.time() - start) 

  
#print answer
print('The first triangle number with >=500 factors = %s  Found in: %s seconds') % (a,elapsed)  
 

